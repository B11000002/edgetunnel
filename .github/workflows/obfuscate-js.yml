name: Obfuscate js

permissions:
  contents: write

on:
  workflow_run:
    workflows:
      - Upstream File Sync # 指定依赖的工作流名称
    types:
      - completed # 在依赖的工作流完成后触发
  push:
    paths:
      - 明文源码.js # 手动触发时的路径匹配
  workflow_dispatch:

jobs:
  obfuscate_and_update_worker:
    name: Obfuscate js
    runs-on: ubuntu-latest

    env:
      SOURCE_FILE: 明文源码.js  # 原始 JavaScript 文件
      OUTPUT_FILE: _worker.js   # 混淆后的输出文件

    steps:
      # 步骤 1: 检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 步骤 2: 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
  
      # 步骤 3: 缓存 Node.js 模块
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 步骤 4: 安装混淆工具
      - name: Install obfuscation tool
        run: |
          npm install -g javascript-obfuscator 

      # 步骤 5: 验证源文件是否存在
      - name: Verify source file exists
        run: |
          if [ ! -f "$SOURCE_FILE" ]; then
            echo "Error: Source file $SOURCE_FILE does not exist."
            exit 1
          fi
      # 步骤 6: 混淆原文件
      - name: Obfuscate ${{ env.SOURCE_FILE }}
        run: |
          javascript-obfuscator $SOURCE_FILE --output $OUTPUT_FILE \
          --compact true \
          --control-flow-flattening false \
          --dead-code-injection false \
          --identifier-names-generator mangled \
          --string-array true \
          --string-array-encoding 'base64' \ 
          --string-array-threshold 0.5 \
          --unicode-escape-sequence false
          echo "已生成混淆后的 $OUTPUT_FILE 文件"

      # 步骤 7: 检查 $OUTPUT_FILE 是否更新
      - name: Check if ${{ env.OUTPUT_FILE }} is updated 
        run: |
          git status
          ls -l $OUTPUT_FILE

      # 步骤 8: 提交并推送更改
      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add $OUTPUT_FILE
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "更新混淆后的 $OUTPUT_FILE 文件"
            git push
          fi
